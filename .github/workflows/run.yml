name: arXiv-daily-ai-enhanced

on:
  schedule:
    - cron: "03 19 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # 安装 uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # 创建虚拟环境
          uv venv
          # 激活虚拟环境
          source .venv/bin/activate
          # 强制安装 arxiv 包，确保版本 >=2.0.0
          uv pip install --force-reinstall "arxiv>=2.0.0"
          # 如果有 requirements.txt 或 pyproject.toml，同步其他依赖
          uv sync || true  # 使用 || true 避免 requirements.txt 缺失导致失败
          # 列出已安装的包以供调试
          pip list > installed_packages.txt
          echo "已安装的 Python 包："
          cat installed_packages.txt

      - name: Crawl arXiv papers
        id: crawl_step
        run: |
          source .venv/bin/activate
          # 抓取前一天的论文（例如，运行时 09-20 抓取 09-19）
          today=$(date -u -d "1 day ago" "+%Y-%m-%d")
          echo "开始爬取前一天 $today 的 arXiv 论文..."
          # 检查今日文件是否已存在，如存在则删除
          if [ -f "data/${today}.jsonl" ]; then
            echo "🗑️ 发现前一天文件已存在，正在删除重新生成..."
            rm "data/${today}.jsonl"
            echo "✅ 已删除现有文件：data/${today}.jsonl"
          else
            echo "📝 前一天文件不存在，准备新建..."
          fi
          cd daily_arxiv
          export HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY }}
          export LANGUAGE="${{ vars.LANGUAGE }}"
          export CATEGORIES="${{ vars.CATEGORIES }}"
          export MODEL_NAME="${{ vars.MODEL_NAME }}"
          export OUTPUT_FILE="../data/${today}.jsonl"
          # 运行 arxiv.py，假设位于 daily_arxiv/ 目录
          python arxiv.py >> crawl.log 2>&1
          # 检查爬取是否成功
          if [ ! -f "../data/${today}.jsonl" ]; then
            echo "爬取失败，未生成数据文件"
            echo "错误日志："
            cat crawl.log
            exit 1
          fi
          # 检查文件是否为空
          if [ ! -s "../data/${today}.jsonl" ]; then
            echo "爬取成功但生成的文件为空"
            echo "错误日志："
            cat crawl.log
            exit 1
          fi
          echo "crawl_date=$today" >> $GITHUB_OUTPUT
          echo "爬取完成"

      - name: Check for duplicates
        id: dedup_check
        run: |
          source .venv/bin/activate
          echo "执行去重检查..."
          cd daily_arxiv
          # 执行去重检查脚本
          set +e  # 暂时允许命令失败
          python check_stats.py
          dedup_exit_code=$?
          set -e  # 恢复严格模式
          echo "去重检查退出码: $dedup_exit_code"
          echo "dedup_exit_code=$dedup_exit_code" >> $GITHUB_OUTPUT
          case $dedup_exit_code in
            0)
              echo "has_new_content=true" >> $GITHUB_OUTPUT
              ;;
            1)
              echo "has_new_content=false" >> $GITHUB_OUTPUT
              echo "skip_reason=no_new_content" >> $GITHUB_OUTPUT
              ;;
            2)
              echo "has_new_content=false" >> $GITHUB_OUTPUT
              echo "skip_reason=processing_error" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo "❌ 未知退出码，停止工作流"
              echo "has_new_content=false" >> $GITHUB_OUTPUT
              echo "skip_reason=unknown_error" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

      - name: AI Enhancement Processing
        if: steps.dedup_check.outputs.has_new_content == 'true'
        run: |
          source .venv/bin/activate
          today=${{ steps.crawl_step.outputs.crawl_date }}
          echo "开始 AI 增强处理..."
          cd ai
          export HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY }}
          export LANGUAGE="${{ vars.LANGUAGE }}"
          export MODEL_NAME="${{ vars.MODEL_NAME }}"
          python enhance.py --data ../data/${today}.jsonl
          # 检查 AI 处理是否成功
          if [ $? -ne 0 ]; then
            echo "AI 处理失败"
            exit 1
          fi
          echo "AI 增强处理完成"

      - name: Convert to Markdown
        if: steps.dedup_check.outputs.has_new_content == 'true'
        run: |
          source .venv/bin/activate
          today=${{ steps.crawl_step.outputs.crawl_date }}
          echo "转换为 Markdown 格式..."
          export LANGUAGE="${{ vars.LANGUAGE }}"
          cd to_md
          AI_FILE="../data/${today}_AI_enhanced_${LANGUAGE}.jsonl"
          if [ -f "$AI_FILE" ]; then
            echo "使用 AI 增强文件进行转换..."
            python convert.py --data "$AI_FILE"
          else
            echo "错误：未找到 AI 增强文件"
            echo "AI 文件: $AI_FILE"
            exit 1
          fi
          # 检查转换是否成功
          if [ $? -ne 0 ]; then
            echo "Markdown 转换失败"
            exit 1
          fi
          echo "Markdown 转换完成"

      - name: Update file list
        if: steps.dedup_check.outputs.has_new_content == 'true'
        run: |
          echo "更新文件列表..."
          ls data/*.jsonl | sed 's|data/||' > assets/file-list.txt
          echo "文件列表更新完成"

      - name: Summary
        run: |
          if [ "${{ steps.dedup_check.outputs.has_new_content }}" = "true" ]; then
            echo "✅ 工作流完成：去重发现新内容并成功处理"
          else
            case "${{ steps.dedup_check.outputs.skip_reason }}" in
              "no_new_content")
                echo "ℹ️ 工作流完成：去重后无新内容"
                ;;
              "processing_error")
                echo "⚠️ 工作流完成：去重处理出错"
                ;;
              "unknown_error")
                echo "⚠️ 工作流完成：未知错误"
                ;;
              *)
                echo "ℹ️ 工作流完成：未知原因跳过处理"
                ;;
            esac
          fi

      - name: Commit changes
        if: steps.dedup_check.outputs.has_new_content == 'true'
        run: |
          git config --global user.email "${{ vars.EMAIL }}"
          git config --global user.name "${{ vars.NAME }}"
          git add .
          # 检查是否有变更需要提交
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
            exit 0
          fi
          git commit -m "update: $(date -u '+%Y-%m-%d') arXiv papers"
          echo "变更已提交"

      - name: Pull latest changes and push
        if: steps.dedup_check.outputs.has_new_content == 'true'
        run: |
          # 设置 Git 配置以处理自动合并
          git config pull.rebase true
          git config rebase.autoStash true
          # 尝试推送，如果失败则拉取并重试
          for i in {1..3}; do
            echo "推送尝试 $i"
            if git push origin main; then
              echo "推送成功"
              break
            else
              echo "推送失败，拉取最新变更..."
              git pull origin main --no-edit || true
              if [ $i -eq 3 ]; then
                echo "3 次尝试后推送失败"
                exit 1
              fi
            fi
          done
